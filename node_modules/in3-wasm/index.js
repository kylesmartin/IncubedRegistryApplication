const IN3=(function(){
var in3w = {};
var Module=typeof in3w!=="undefined"?in3w:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram="./this.program";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof process.versions==="object"&&typeof process.versions.node==="string";ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require("path").dirname(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);return nodeFS["readFileSync"](filename,binary?null:"utf8")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("ue",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});quit_=function(status){process["exit"](status)};Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!="undefined"){read_=function shell_read(f){var data=tryParseAsDataURI(f);if(data){return intArrayToString(data)}return read(f)}}readBinary=function readBinary(f){var data;data=tryParseAsDataURI(f);if(data){return data}if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){arguments_=scriptArgs}else if(typeof arguments!="undefined"){arguments_=arguments}if(typeof quit==="function"){quit_=function(status){quit(status)}}if(typeof print!=="undefined"){if(typeof console==="undefined")console={};console.log=print;console.warn=console.error=typeof printErr!=="undefined"?printErr:print}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=function shell_read(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function readBinary(url){try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}readAsync=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime;if(Module["noExitRuntime"])noExitRuntime=Module["noExitRuntime"];if(typeof WebAssembly!=="object"){abort("no native wasm support detected")}var wasmMemory;var wasmTable=new WebAssembly.Table({"initial":39,"maximum":39+0,"element":"anyfunc"});var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];assert(func,"Cannot call unknown function "+ident+", make sure it is exported");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={"string":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},"array":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType==="string")return UTF8ToString(ret);if(returnType==="boolean")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function cwrap(ident,returnType,argTypes,opts){argTypes=argTypes||[];var numericArgs=argTypes.every(function(type){return type==="number"});var numericRet=returnType!=="string";if(numericRet&&numericArgs&&!opts){return getCFunc(ident)}return function(){return ccall(ident,returnType,argTypes,arguments,opts)}}var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var DYNAMIC_BASE=5327344,DYNAMICTOP_PTR=84304;var INITIAL_INITIAL_MEMORY=Module["INITIAL_MEMORY"]||16777216;if(Module["wasmMemory"]){wasmMemory=Module["wasmMemory"]}else{wasmMemory=new WebAssembly.Memory({"initial":INITIAL_INITIAL_MEMORY/WASM_PAGE_SIZE,"maximum":2147483648/WASM_PAGE_SIZE})}if(wasmMemory){buffer=wasmMemory.buffer}INITIAL_INITIAL_MEMORY=buffer.byteLength;updateGlobalBufferAndViews(buffer);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Module["dynCall_v"](func)}else{Module["dynCall_vi"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){if(Module["onAbort"]){Module["onAbort"](what)}what+="";out(what);err(what);ABORT=true;EXITSTATUS=1;what="abort("+what+"). Build with -s ASSERTIONS=1 for more info.";throw new WebAssembly.RuntimeError(what)}function hasPrefix(str,prefix){return String.prototype.startsWith?str.startsWith(prefix):str.indexOf(prefix)===0}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return hasPrefix(filename,dataURIPrefix)}var fileURIPrefix="file://";function isFileURI(filename){return hasPrefix(filename,fileURIPrefix)}var wasmBinaryFile="data:application/octet-stream;base64,";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(wasmBinaryFile);if(binary){return binary}if(readBinary){return readBinary(wasmBinaryFile)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch==="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiatedSource(output){receiveInstance(output["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming==="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch==="function"){fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiatedSource,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiatedSource)})})}else{return instantiateArrayBuffer(receiveInstantiatedSource)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync();return{}}function in3_cache_get(key){var val=Module.in3_cache.get(UTF8ToString(key));if(val){var len=(val.length<<2)+1;var ret=stackAlloc(len);stringToUTF8(val,ret,len);return ret}return 0}function in3_cache_set(key,val){Module.in3_cache.set(UTF8ToString(key),UTF8ToString(val))}function plgn_exec_rpc_handle(c,ctx,req,index){var client=Module.clients[c];var plgn=client&&client.plugins[index];if(!plgn)return-4;try{var json=JSON.parse(UTF8ToString(req));var val=plgn.handleRPC(client,json);if(typeof val=="undefined")return-17;if(!val.then)val=Promise.resolve(val);var id=++in3w.promiseCount;in3w.promises[""+id]=val;json.in3={rpc:"promise://"+id};in3w.ccall("wasm_set_request_ctx","void",["number","string"],[ctx,JSON.stringify(json)])}catch(x){setResponse(ctx,JSON.stringify({error:{message:x.message||x}}),0,false)}return 0}function plgn_exec_term(c,index){var client=Module.clients[c];var plgn=client&&client.plugins[index];if(!plgn)return-4;return plgn.term(client)||0}__ATINIT__.push({func:function(){___wasm_call_ctors()}});function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function _emscripten_get_heap_size(){return HEAPU8.length}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){requestedSize=requestedSize>>>0;var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}var minHeapSize=16777216;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(minHeapSize,requestedSize,overGrownHeapSize),PAGE_MULTIPLE));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _exit(status){exit(status)}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};var SYSCALLS={mappings:{},buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},get64:function(low,high){return low}};function _fd_close(fd){return 0}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){}function _fd_write(fd,iov,iovcnt,pnum){var num=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(fd,HEAPU8[ptr+j])}num+=len}HEAP32[pnum>>2]=num;return 0}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}var ___tm_current=84320;var ___tm_timezone=(stringToUTF8("GMT",84368,4),84368);function _tzset(){if(_tzset.called)return;_tzset.called=true;HEAP32[__get_timezone()>>2]=(new Date).getTimezoneOffset()*60;var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);HEAP32[__get_daylight()>>2]=Number(winter.getTimezoneOffset()!=summer.getTimezoneOffset());function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summer.getTimezoneOffset()<winter.getTimezoneOffset()){HEAP32[__get_tzname()>>2]=winterNamePtr;HEAP32[__get_tzname()+4>>2]=summerNamePtr}else{HEAP32[__get_tzname()>>2]=summerNamePtr;HEAP32[__get_tzname()+4>>2]=winterNamePtr}}function _localtime_r(time,tmPtr){_tzset();var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst;var zonePtr=HEAP32[__get_tzname()+(dst?4:0)>>2];HEAP32[tmPtr+40>>2]=zonePtr;return tmPtr}function _localtime(time){return _localtime_r(time,___tm_current)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob==="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE==="boolean"&&ENVIRONMENT_IS_NODE){var buf;try{buf=Buffer.from(s,"base64")}catch(_){buf=new Buffer(s,"base64")}return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={"k":_emscripten_memcpy_big,"l":_emscripten_resize_heap,"f":_exit,"e":_fd_close,"j":_fd_seek,"d":_fd_write,"g":_gettimeofday,"n":in3_cache_get,"m":in3_cache_set,"c":_localtime,"memory":wasmMemory,"h":plgn_exec_rpc_handle,"i":plgn_exec_term,"b":_strftime,"table":wasmTable,"a":_time};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["o"]).apply(null,arguments)};var _in3_set_error=Module["_in3_set_error"]=function(){return(_in3_set_error=Module["_in3_set_error"]=Module["asm"]["p"]).apply(null,arguments)};var ___em_js__in3_cache_get=Module["___em_js__in3_cache_get"]=function(){return(___em_js__in3_cache_get=Module["___em_js__in3_cache_get"]=Module["asm"]["q"]).apply(null,arguments)};var ___em_js__in3_cache_set=Module["___em_js__in3_cache_set"]=function(){return(___em_js__in3_cache_set=Module["___em_js__in3_cache_set"]=Module["asm"]["r"]).apply(null,arguments)};var _in3_version=Module["_in3_version"]=function(){return(_in3_version=Module["_in3_version"]=Module["asm"]["s"]).apply(null,arguments)};var ___em_js__plgn_exec_term=Module["___em_js__plgn_exec_term"]=function(){return(___em_js__plgn_exec_term=Module["___em_js__plgn_exec_term"]=Module["asm"]["t"]).apply(null,arguments)};var ___em_js__plgn_exec_rpc_handle=Module["___em_js__plgn_exec_rpc_handle"]=function(){return(___em_js__plgn_exec_rpc_handle=Module["___em_js__plgn_exec_rpc_handle"]=Module["asm"]["u"]).apply(null,arguments)};var _wasm_register_plugin=Module["_wasm_register_plugin"]=function(){return(_wasm_register_plugin=Module["_wasm_register_plugin"]=Module["asm"]["v"]).apply(null,arguments)};var _wasm_set_request_ctx=Module["_wasm_set_request_ctx"]=function(){return(_wasm_set_request_ctx=Module["_wasm_set_request_ctx"]=Module["asm"]["w"]).apply(null,arguments)};var _ctx_execute=Module["_ctx_execute"]=function(){return(_ctx_execute=Module["_ctx_execute"]=Module["asm"]["x"]).apply(null,arguments)};var _ifree=Module["_ifree"]=function(){return(_ifree=Module["_ifree"]=Module["asm"]["y"]).apply(null,arguments)};var _wasm_init=Module["_wasm_init"]=function(){return(_wasm_init=Module["_wasm_init"]=Module["asm"]["z"]).apply(null,arguments)};var _imalloc=Module["_imalloc"]=function(){return(_imalloc=Module["_imalloc"]=Module["asm"]["A"]).apply(null,arguments)};var _in3_blacklist=Module["_in3_blacklist"]=function(){return(_in3_blacklist=Module["_in3_blacklist"]=Module["asm"]["B"]).apply(null,arguments)};var _ctx_set_response=Module["_ctx_set_response"]=function(){return(_ctx_set_response=Module["_ctx_set_response"]=Module["asm"]["C"]).apply(null,arguments)};var _base64Decode=Module["_base64Decode"]=function(){return(_base64Decode=Module["_base64Decode"]=Module["asm"]["D"]).apply(null,arguments)};var _base64Encode=Module["_base64Encode"]=function(){return(_base64Encode=Module["_base64Encode"]=Module["asm"]["E"]).apply(null,arguments)};var _in3_create=Module["_in3_create"]=function(){return(_in3_create=Module["_in3_create"]=Module["asm"]["F"]).apply(null,arguments)};var _in3_dispose=Module["_in3_dispose"]=function(){return(_in3_dispose=Module["_in3_dispose"]=Module["asm"]["G"]).apply(null,arguments)};var _in3_is_alive=Module["_in3_is_alive"]=function(){return(_in3_is_alive=Module["_in3_is_alive"]=Module["asm"]["H"]).apply(null,arguments)};var _in3_config=Module["_in3_config"]=function(){return(_in3_config=Module["_in3_config"]=Module["asm"]["I"]).apply(null,arguments)};var _in3_last_error=Module["_in3_last_error"]=function(){return(_in3_last_error=Module["_in3_last_error"]=Module["asm"]["J"]).apply(null,arguments)};var _in3_create_request_ctx=Module["_in3_create_request_ctx"]=function(){return(_in3_create_request_ctx=Module["_in3_create_request_ctx"]=Module["asm"]["K"]).apply(null,arguments)};var _in3_request_free=Module["_in3_request_free"]=function(){return(_in3_request_free=Module["_in3_request_free"]=Module["asm"]["L"]).apply(null,arguments)};var _hash_keccak=Module["_hash_keccak"]=function(){return(_hash_keccak=Module["_hash_keccak"]=Module["asm"]["M"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["N"]).apply(null,arguments)};var _to_checksum_address=Module["_to_checksum_address"]=function(){return(_to_checksum_address=Module["_to_checksum_address"]=Module["asm"]["O"]).apply(null,arguments)};var _abi_encode=Module["_abi_encode"]=function(){return(_abi_encode=Module["_abi_encode"]=Module["asm"]["P"]).apply(null,arguments)};var _abi_decode=Module["_abi_decode"]=function(){return(_abi_decode=Module["_abi_decode"]=Module["asm"]["Q"]).apply(null,arguments)};var _private_to_address=Module["_private_to_address"]=function(){return(_private_to_address=Module["_private_to_address"]=Module["asm"]["R"]).apply(null,arguments)};var _ec_sign=Module["_ec_sign"]=function(){return(_ec_sign=Module["_ec_sign"]=Module["asm"]["S"]).apply(null,arguments)};var __get_tzname=Module["__get_tzname"]=function(){return(__get_tzname=Module["__get_tzname"]=Module["asm"]["T"]).apply(null,arguments)};var __get_daylight=Module["__get_daylight"]=function(){return(__get_daylight=Module["__get_daylight"]=Module["asm"]["U"]).apply(null,arguments)};var __get_timezone=Module["__get_timezone"]=function(){return(__get_timezone=Module["__get_timezone"]=Module["asm"]["V"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["W"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["X"]).apply(null,arguments)};var stackAlloc=Module["stackAlloc"]=function(){return(stackAlloc=Module["stackAlloc"]=Module["asm"]["Y"]).apply(null,arguments)};var dynCall_vi=Module["dynCall_vi"]=function(){return(dynCall_vi=Module["dynCall_vi"]=Module["asm"]["Z"]).apply(null,arguments)};Module["ccall"]=ccall;Module["cwrap"]=cwrap;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0)return;function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){if(implicit&&noExitRuntime&&status===0){return}if(noExitRuntime){}else{ABORT=true;EXITSTATUS=status;exitRuntime();if(Module["onExit"])Module["onExit"](status)}quit_(status,new ExitStatus(status))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}noExitRuntime=true;run();
/*******************************************************************************
 * This file is part of the Incubed project.
 * Sources: https://github.com/slockit/in3-c
 * 
 * Copyright (C) 2018-2020 slock.it GmbH, Blockchains LLC
 * 
 * 
 * COMMERCIAL LICENSE USAGE
 * 
 * Licensees holding a valid commercial license may use this file in accordance 
 * with the commercial license agreement provided with the Software or, alternatively, 
 * in accordance with the terms contained in a written agreement between you and 
 * slock.it GmbH/Blockchains LLC. For licensing terms and conditions or further 
 * information please contact slock.it at in3@slock.it.
 * 	
 * Alternatively, this file may be used under the AGPL license as follows:
 *    
 * AGPL LICENSE USAGE
 * 
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free Software 
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 * [Permissions of this strong copyleft license are conditioned on making available 
 * complete source code of licensed works and modifications, which include larger 
 * works using a licensed work, under the same license. Copyright and license notices 
 * must be preserved. Contributors provide an express grant of patent rights.]
 * You should have received a copy of the GNU Affero General Public License along 
 * with this program. If not, see <https://www.gnu.org/licenses/>.
 *******************************************************************************/

// implement the transport and storage handlers
/* istanbul ignore next */
if (typeof fetch === 'function') {

    // for browsers
    in3w.in3_cache = {
        get: key => window.localStorage.getItem('in3.' + key),
        set: (key, value) => window.localStorage.setItem('in3.' + key, value)
    }
    in3w.transport = (url, payload, timeout) => Promise.race([
        fetch(url, {
            method: 'POST',
            mode: 'cors', // makes it possible to access them even from the filesystem.
            headers: { 'Content-Type': 'application/json', 'User-Agent': 'in3 wasm ' + getVersion() },
            body: payload
        }),
        new Promise((_, reject) => setTimeout(() => reject(new Error('timeout')), timeout || 30000))]
    ).then(res => {
        if (res.status < 200 || res.status >= 400) throw new Error("Error fetching" + url + ":" + res.statusText)
        return res.text()
    })
}
else {
    // for nodejs
    fs = require('' + 'fs')
    try { fs.mkdirSync('.in3') } catch (x) { }
    in3w.in3_cache = {
        get(key) {
            try {
                return fs.readFileSync('.in3/' + key).toString('hex');
            } catch (x) { }
            return null
        },
        set(key, value) {
            fs.writeFileSync('.in3/' + key, Buffer.from(value, 'hex'))
        }
    }

    try {
        // if axios is available, we use it
        const axios = require('' + 'axios')
        in3w.transport = (url, payload, timeout = 30000) => axios.post(url, JSON.parse(payload), { timeout, headers: { 'Content-Type': 'application/json', 'User-Agent': 'in3 wasm ' + getVersion(), in3: 'wasm ' + getVersion() } })
            .then(res => {
                if (res.status != 200) throw new Error("Invalid satus")
                return JSON.stringify(res.data)
            })
    } catch (xx) {
        // if not we use the raw http-implementation of nodejs
        in3w.transport = (url, payload, timeout = 30000) => new Promise((resolve, reject) => {
            try {
                const postData = payload;//JSON.stringify(payload);
                const m = require(url.startsWith('https') ? 'https' : 'http')
                const req = m.request(url, {
                    method: 'POST',
                    headers: {
                        'User-Agent': 'in3 wasm ' + getVersion(),
                        in3: 'wasm ' + getVersion(),
                        'Content-Type': 'application/json',
                        'Content-Length': Buffer.byteLength(postData)
                    },
                    body: payload // body data type must match "Content-Type" header
                }, (res) => {
                    if (res.statusCode < 200 || res.statusCode >= 400)
                        reject(new Error("Invalid Status (" + res.statusCode + ') from server'))
                    else {
                        res.setEncoding('utf8');
                        let result = ''
                        res.on('data', _ => result += _)
                        res.on('end', () => resolve(result))
                    }
                })
                req.setTimeout(timeout, (e) => reject(new Error('timeout')))
                req.on('error', (e) => reject(new Error(e.message)))
                req.write(postData);
                req.end();

            }
            catch (er) {
                console.error('...ERROR : ', er)
                throw er
            }
        })
    }
}
function getVersion() {
    if (in3w._version) return in3w._version
    in3w._version = in3w.ccall('in3_version', 'string', [], [])
    return in3w._version
}

// keep track of all created client instances
const clients = in3w.clients = {}
in3w.promises = {}
in3w.promiseCount = 0;
in3w.extensions = []

// create a flag indicating when the wasm was succesfully loaded.
let _in3_listeners = []
in3w.onRuntimeInitialized = _ => {
    in3w.ccall('wasm_init', 'void', [], []);
    const o = _in3_listeners
    _in3_listeners = undefined
    o.forEach(_ => _(true))
}

// check if the last error was set and throws it.
function throwLastError() {
    const er = in3w.ccall('in3_last_error', 'string', [], []);
    if (er) throw new Error(er + (in3w.sign_js.last_sign_error ? (' : ' + in3w.sign_js.last_sign_error) : ''))
}
const aliases = { kovan: '0x2a', tobalaba: '0x44d', main: '0x1', ipfs: '0x7d0', mainnet: '0x1', goerli: '0x5', ewc: '0xf6', btc: '0x99' }


/**
 * The incubed client.
 */
class IN3 {

    // since loading the wasm is async, we always need to check whether the wasm was created before using it.
    async _ensure_ptr() {
        if (this.ptr) return
        if (_in3_listeners)
            await new Promise(r => _in3_listeners.push(r))
        let chainId = this.config && this.config.chainId
        if (chainId && aliases[chainId]) chainId = aliases[chainId]
        this.ptr = in3w.ccall('in3_create', 'number', ['number'], [parseInt(chainId) || 0]);
        clients['' + this.ptr] = this
        this.plugins.forEach(_ => this.registerPlugin(_))
    }

    // here we are creating the instance lazy, when the first function is called.
    constructor(config) {
        const def = { requestCount: 2 }
        this.ptr = 0;
        this.setConfig(config ? { ...def, ...config } : def)
        in3w.extensions.forEach(_ => _(this))
        this.plugins = []
    }

    /**
     * configures the client.
     */
    setConfig(conf) {
        if (conf) {
            if (conf.chainId && aliases[conf.chainId]) {
                if (conf.nodes && conf.nodes[conf.chainId]) {
                    const nl = conf.nodes[conf.chainId]
                    delete conf.nodes[conf.chainId]
                    conf.nodes[aliases[conf.chainId]] = nl
                }
                conf.chainId = aliases[conf.chainId]
            }
            this.config = { ...this.config, ...conf }
        }
        this.needsSetConfig = !this.ptr
        if (this.ptr) {
            if (this.config.transport) {
                this.transport = this.config.transport
                delete this.config.transport
            }
            const r = in3w.ccall('in3_config', 'number', ['number', 'string'], [this.ptr, JSON.stringify(this.config)]);
            if (r) {
                const ex = new Error(UTF8ToString(r))
                _free(r)
                throw ex
            }
        }
    }

    /**
       * sends one or a multiple requests.
       * if the request is a array the response will be a array as well.
       * If the callback is given it will be called with the response, if not a Promise will be returned.
       * This function supports callback so it can be used as a Provider for the web3.
       */
    send(request, callback) {
        const p = this.sendRequest(request)
        if (callback)
            p.then(_ => callback(null, _), err => callback(err, null))
        else
            return p
    }

    registerPlugin(plgn) {
        let action = 0
        if (plgn.term) action |= 0x2
        if (plgn.getAccount) action |= 0x20
        if (plgn.handleRPC) action |= 0x100
        if (plgn.verifyRPC) action |= 0x200
        if (plgn.cacheGet) action |= 0x800
        if (plgn.cacheSet) action |= 0x400
        if (plgn.cacheClear) action |= 0x1000
        let index = this.plugins.indexOf(plgn)
        if (index == -1) {
            index = this.plugins.length
            this.plugins.push(plgn)
        }

        if (this.ptr)
            in3w.ccall('wasm_register_plugin', 'number', ['number', 'number', 'number'], [this.ptr, action, index]);
    }


    /**
     * sends a request and returns the response.
     */
    async sendRequest(rpc) {
        // ensure we have created the instance.
        if (!this.ptr) await this._ensure_ptr();
        if (this.needsSetConfig) this.setConfig()

        // currently we don't handle bulks directly
        if (Array.isArray(rpc)) return Promise.all(rpc.map(_ => this.sendRequest(_)))

        // replace ens-addresses
        if (rpc.params && rpc.method != 'in3_ens')
            for (const p of rpc.params) {
                if (typeof (p) === 'string' && p.endsWith('.eth')) rpc.params[rpc.indexOf(p)] = await this.eth.resolveENS(p)
            }

        // create the context
        let responses = {}
        const r = in3w.ccall('in3_create_request_ctx', 'number', ['number', 'string'], [this.ptr, JSON.stringify(rpc)]);
        if (!r) throwLastError();
        this.pending = (this.pending || 0) + 1

        try {
            // main async loop
            // we repeat it until we have a result
            while (this.ptr && !this.delayFree) {
                const js = call_string('ctx_execute', r).replace(/\n/g, ' > ')
                let state;
                try {
                    state = JSON.parse(js)
                }
                catch (x) {
                    throw new Error("Invalid json:", js)
                }
                switch (state.status) {
                    case 'error':
                        throw new Error(state.error || 'Unknown error')
                    case 'ok':
                        if (Array.isArray(state.result)) {
                            const s = state.result[0]
                            if (!this.config || !this.config.keepIn3) delete s.in3
                            return s
                        }
                        return state.result
                    case 'waiting':
                        await getNextResponse(responses, { ...state.request, in3: this, root: r })
                        break
                    case 'request': {
                        const req = { ...state.request, in3: this, root: r }
                        switch (req.type) {
                            case 'sign':
                                try {
                                    const [message, account] = Array.isArray(req.payload) ? req.payload[0].params : req.payload.params;
                                    if (!this.signer) throw new Error('no signer set to handle signing')
                                    if (!(await this.signer.canSign(account))) throw new Error('unknown account ' + account)
                                    setResponse(req.ctx, toHex(await this.signer.sign(message, account, true, false)), 0, false)
                                } catch (ex) {
                                    setResponse(req.ctx, ex.message || ex, 0, true)
                                }
                                break;

                            case 'rpc':
                                if (req.wait) await new Promise(r => setTimeout(r, req.wait))
                                if (req.urls[0].startsWith("promise://"))
                                    await resolvePromises(req.ctx, req.urls[0])
                                else
                                    await getNextResponse(responses, req)
                        }

                    }

                }
            }
            throw new Error('Request canceled by calling free on the client')
        }
        finally {
            cleanUpResponses(responses, this.ptr)

            // we always need to cleanup
            in3w.ccall('in3_request_free', 'void', ['number'], [r])

            this.pending--
            if (!this.pending && this.delayFree) this.free()
        }
    }


    async sendRPC(method, params = []) {
        const res = await this.sendRequest({ method, params })
        if (res.error) throw new Error(res.error.message || res.error)
        return res.result
    }

    createWeb3Provider() { return this }

    free() {
        if (this.pending)
            this.delayFree = true
        else if (this.ptr) {
            in3w.ccall('in3_dispose', 'void', ['number'], [this.ptr])
            delete clients['' + this.ptr]
            this.ptr = 0
        }
    }
}

async function resolvePromises(ctx, url) {
    const pid = url.substr(10)
    const p = in3w.promises[pid]
    if (!p)
        setResponse(ctx, JSON.stringify({ error: { message: 'could not find the requested proomise' } }), 0, false)
    else {
        delete in3w.promises[pid]
        return p
            .then(r => setResponse(ctx, JSON.stringify({ result: r }), 0, false))
            .catch(e => setResponse(ctx, JSON.stringify({ error: { message: e.message || e } }), 0, false))
    }
}

function cleanUpResponses(responses, ptr) {
    Object.keys(responses).forEach(ctx => responses[ctx].cleanUp(ptr))
}

function getNextResponse(map, req) {
    let res = req.urls ? (map[req.ctx + ''] = url_queue(req)) : map[req.ctx + '']
    return res.getNext()
}

function url_queue(req) {
    let counter = 0
    const promises = [], responses = []
    if (req.in3.config.debug) console.log("send req (" + req.ctx + ") to " + req.urls.join() + ' : ', JSON.stringify(req.payload, null, 2))
    const transport = req.in3.transport || in3w.transport
    req.urls.forEach((url, i) => transport(url, JSON.stringify(req.payload), req.timeout || 30000).then(
        response => { responses.push({ i, url, response }); trigger() },
        error => { responses.push({ i, url, error }); trigger() }
    ))
    function trigger() {
        while (promises.length && responses.length) {
            const p = promises.shift(), r = responses.shift()
            if (!req.cleanUp && req.in3.ptr && in3w.ccall('in3_is_alive', 'number', ['number', 'number'], [req.root, req.ctx])) {
                if (r.error) {
                    if (req.in3.config.debug) console.error("res err (" + req.ctx + "," + r.url + ") : " + r.error)
                    setResponse(req.ctx, r.error.message || r.error, r.i, true)
                }
                else {
                    try {
                        if (req.in3.config.debug) console.log("res (" + req.ctx + "," + r.url + ") : " + JSON.stringify(JSON.parse(r.response), null, 2))
                        setResponse(req.ctx, r.response, r.i, false)
                    } catch (x) {
                        setResponse(req.ctx, r.error.message || r.error, r.i, true)
                    }
                }
            }
            p.resolve(r)
        }
    }

    const result = {
        req,
        getNext: () => new Promise((resolve, reject) => {
            counter++
            if (counter > req.urls.length) throw new Error('no more response available')
            promises.push({ resolve, reject })
            trigger()
        }),
        cleanUp(ptr) {
            req.cleanUp = true
            while (req.urls.length - counter > 0) {
                this.getNext().then(
                    r => {
                        // is the client still alive?
                        if (!clients['' + ptr]) return
                        let blacklist = false
                        try {
                            blacklist = r.error || !!JSON.parse(r.response)[0].error
                        }
                        catch (x) {
                            blacklist = true
                        }
                        if (blacklist) in3w.ccall('in3_blacklist', 'void', ['number', 'string'], [ptr, r.url])
                    }, () => { }
                )
            }
        }
    }
    return result
}



// change the transport
IN3.setTransport = function (fn) {
    in3w.transport = fn
}

// change the transport
IN3.setStorage = function (fn) {
    in3w.in3_cache = fn
}

IN3.freeAll = function () {
    Object.keys(clients).forEach(_ => clients[_].free())
}


// the given function fn will be executed as soon as the wasm is loaded. and returns the result as promise.
IN3.onInit = function (fn) {
    return new Promise((resolve, reject) => {
        const check = () => {
            try {
                resolve(fn())
            }
            catch (x) {
                reject(x)
            }
        }
        if (_in3_listeners)
            _in3_listeners.push(check)
        else
            check()
    })
}

// change the Buffer
IN3.setConvertBuffer = function (fn) {
    convertBuffer = fn
}

// also support ES6-modules
IN3.default = IN3

// the default export should be generic (in TS), but the member IN3 uses defaults
IN3.IN3 = IN3

// defined the export
if (typeof module !== "undefined")
    module.exports = IN3



// helper functions
function setResponse(ctx, msg, i, isError) {
    if (msg.length > 5000) {
        // here we pass the string as pointer using malloc before
        const len = (msg.length << 2) + 1;
        const ptr = in3w.ccall('imalloc', 'number', ['number'], [len])
        if (!ptr)
            throw new Error('Could not allocate memory (' + len + ')')
        stringToUTF8(msg, ptr, len);
        in3w.ccall('ctx_set_response', 'void', ['number', 'number', 'number', 'number'], [ctx, i, isError, ptr])
        in3w.ccall('ifree', 'void', ['number'], [ptr])

    }
    else
        in3w.ccall('ctx_set_response', 'void', ['number', 'number', 'number', 'string'], [ctx, i, isError, msg])
    //                        console.log((isError ? 'ERROR ' : '') + ' response  :', msg)
}

function check_ready() {
    if (_in3_listeners) throw new Error('The Incubed wasm runtime is not initialized yet! Please use onInit() to execute it when ready.')
}

const fixLength = (hex) => hex.length % 2 ? '0' + hex : hex

// Default conversion functions
let convertBigInt = toBigInt
let convertBuffer = toUint8Array

// Overriding default convert
function setConvertBigInt(convertBigFn) {
    convertBigInt = convertBigFn
}

function setConvertBuffer(convertBufFn) {
    convertBuffer = convertBufFn
}

if (typeof (_free) == 'undefined') _free = function (ptr) {
    in3w.ccall("ifree", 'void', ['number'], [ptr])
}
/**
 * internal function calling a wasm-function, which returns a string.
 * @param {*} name 
 * @param  {...any} params_values 
 */
function call_string(name, ...params_values) {
    check_ready()
    const res = in3w.ccall(name, 'number', params_values.map(_ => _ && _.__proto__ === Uint8Array.prototype ? 'array' : typeof _), params_values)
    if (!res) return null
    const result = UTF8ToString(res)
    if (result && result.startsWith(":ERROR:")) throw new Error(result.substr(7))
    _free(res)
    return result
}

function call_buffer(name, len, ...params_values) {
    check_ready()
    const res = in3w.ccall(name, 'number', params_values.map(_ => _ && _.__proto__ === Uint8Array.prototype ? 'array' : typeof _), params_values)
    if (!res) return null
    const result = HEAPU8.slice(res, res + len)
    _free(res)
    return result
}

/**
 *
 * simple promisy-function
 */
function promisify(self, fn, ...args) {
    return new Promise((resolve, reject) => {
        fn.apply(self, [...args, (err, res) => {
            if (err)
                reject(err)
            else
                resolve(res)
        }])
    })
}

// Credit to: https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript
function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = "";
    len = array.length;
    i = 0;
    while (i < len) {
        c = array[i++];
        switch (c >> 4) {
            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                // 0xxxxxxx
                out += String.fromCharCode(c);
                break;
            case 12: case 13:
                // 110x xxxx   10xx xxxx
                char2 = array[i++];
                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                break;
            case 14:
                // 1110 xxxx  10xx xxxx  10xx xxxx
                char2 = array[i++];
                char3 = array[i++];
                out += String.fromCharCode(((c & 0x0F) << 12) |
                    ((char2 & 0x3F) << 6) |
                    ((char3 & 0x3F) << 0));
                break;
        }
    }

    return out;
}

function toUtf8(val) {
    if (!val) return val
    if (val.constructor == Uint8Array) {
        return Utf8ArrayToStr(val)
    }
    if (typeof val === 'string' && val.startsWith('0x')) {
        const hex = fixLength(val).substr(2)
        let str = ''
        for (let i = 0; i < hex.length; i += 2)
            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16))
        return str
    }
    return val.toString('utf8')
}
/**
 * check a RPC-Response for errors and rejects the promise if found
 */
function checkForError(res) {
    if (Array.isArray(res))
        return res.find(_ => !!_.error) ? Promise.reject(new Error(res.find(_ => !!_.error).error)) : res
    return res.error ? Promise.reject(new Error(res.error)) : res
}

/**
 * convert to BigNumber
 */
function toBigInt(val) {
    if (typeof val === 'bigint') return val
    if (typeof val === 'number') return BigInt(val)
    if (typeof val === 'undefined') return undefined
    if (typeof val === 'null') return null
    return BigInt(toHex(val))
}

function keccak(val) {
    if (!val) return val
    val = toUint8Array(val)
    return toBuffer(call_buffer('hash_keccak', 32, val, val.byteLength))
}

function toChecksumAddress(val, chainId = 0) {
    if (!val) return val
    return call_string('to_checksum_address', toUint8Array(val, 20), chainId);
}

function private2address(pk) {
    if (!pk) return pk
    pk = toUint8Array(pk)
    return toChecksumAddress(call_buffer('private_to_address', 20, pk, pk.byteLength))
}


function abiEncode(sig, ...params) {
    const convert = a => Array.isArray(a) ? a.map(convert) : toHex(a)
    return call_string('abi_encode', sig, JSON.stringify(convert(params)))
}

function ecSign(pk, data, hashMessage = true, adjustV = true) {
    data = toUint8Array(data)
    pk = toUint8Array(pk)
    return call_buffer('ec_sign', 65, pk, hashMessage ? 1 : 0, data, data.byteLength, adjustV ? 1 : 0)
}

function abiDecode(sig, data) {
    const types = splitTypes(sig.substr(sig.indexOf(':') + 1))
    data = toUint8Array(data)
    let res = JSON.parse(call_string('abi_decode', sig, data, data.byteLength))
    if (types.length == 1) res = [res]
    if (!res.length) return []
    return convertTypes(types, res)
}

function convertType(val, t) {
    const isArray = t.indexOf('[')
    if (isArray >= 0) {
        t = t.substr(0, isArray)
        if (t !== 'string' && t != 'bytes')
            return val ? val.map(_ => convertType(_, t)) : []
    }

    if (t.startsWith('(')) return convertTypes(splitTypes(t), val)
    switch (t) {
        case 'bool':
            return !!toNumber(val)
        case 'address':
            return toHex(val, 20)
        case 'string':
            return toUtf8(val)
        case 'bytes':
            return toHex(val)
        case 'uint8':
        case 'uint16':
        case 'uint32':
            return toNumber(val)
        default:
            return t.startsWith('bytes') ? toHex(val) : toBigInt(val)
    }
}

function convertTypes(types, res) {
    if (types.length != res.length) throw new Error('Mismatch in result def')
    return res.map((val, i) => convertType(val, types[i]))
}

function splitTypes(types, removeBrackets = true) {
    if (removeBrackets && types.startsWith('(') && types.endsWith(')')) types = types.substr(1, types.length - 2)
    let p = 0,
        l = 0,
        res = []
    for (let i = 0; i < types.length; i++)
        switch (types[i]) {
            case '(':
                l++;
                break;
            case ')':
                l--;
                break;
            case ',':
                if (!l) {
                    res.push(types.substring(p, i))
                    p = i + 1
                }
        }
    if (types.length > p + 1) res.push(types.substr(p))
    return res
}
/**
 * converts any value as hex-string
 */
function toHex(val, bytes) {
    if (val === undefined)
        return undefined;
    let hex = ''
    if (typeof val === 'string')
        hex = val.startsWith('0x')
            ? val.substr(2)
            : (parseInt(val[0])
                ? BigInt(val).toString(16)
                : Object.keys(val).map(_ => padStart(val.charCodeAt(_).toString(16), 2, '0')).join('')
            )
    else if (typeof val === 'boolean')
        hex = val ? '01' : '00'
    else if (typeof val === 'number' || typeof val === 'bigint')
        hex = val.toString(16)
    else if (val && val._isBigNumber) // BigNumber
        hex = val.toHexString()
    else if (val && (val.redIMul || val.readBigInt64BE)) // bn.js or nodejs Buffer
        hex = val.toString('hex')
    else if (val && val.byteLength) {
        const ar = val.buffer ? val : new Uint8Array(val)
        for (let i = 0; i < val.byteLength; i++) hex += padStart(ar[i].toString(16), 2, '0')
    } else
        throw new Error('Unknown or unsupported type : ' + JSON.stringify(val))

    if (bytes)
        hex = padStart(hex, bytes * 2, '0'); // workaround for ts-error in older js
    if (hex.length % 2)
        hex = '0' + hex;
    return '0x' + hex.toLowerCase();
}
/**
 * converts to a js-number
 */
function toNumber(val) {
    switch (typeof val) {
        case 'number':
            return val
        case 'boolean':
            return val ? 1 : 0
        case 'bigint':
        case 'string':
            return parseInt(val)
        case 'undefined':
        case 'null':
            return 0
        default:
            if (!val) return 0
            if (val.readBigInt64BE) //nodejs Buffer
                return val.length == 0 ? 0 : parseInt(toMinHex(val))
            else if (val.redIMul)
                return val.bitLength() > 53 ? toNumber(val.toArrayLike(Uint8Array)) : val.toNumber()
            else if (val.byteLength)
                return parseInt(toHex(val))
            else if (val && val._isBigNumber)
                try {
                    return val.toNumber()
                }
                catch (ex) {
                    return toNumber(val.toHexString())
                }
            throw new Error('can not convert a ' + (typeof val) + ' to number');
    }
}

function toBuffer(val, len = -1) {
    return convertBuffer(val, len)
}
/**
 * converts any value as Buffer (toUint8Array)
 *  if len === 0 it will return an empty Buffer if the value is 0 or '0x00', since this is the way rlpencode works wit 0-values.
 */
function toUint8Array(val, len = -1) {
    if (val && val._isBigNumber)
        val = val.toHexString();
    if (typeof val == 'string') {
        let b;
        if (val && !val.startsWith('0x') && val.length && (parseInt(val) || val == '0'))
            val = '0x' + BigInt(val).toString(16)

        if (val.startsWith('0x')) {
            val = fixLength(val.substr(2))
            b = new Uint8Array(val.length >> 1)
            for (let i = 0; i < b.byteLength; i++) b[i] = parseInt('0x' + val.substr(i << 1, 2))
        } else {
            b = new Uint8Array(val.length)
            for (let i = 0; i < b.byteLength; i++) b[i] = val.charCodeAt(i)
        }
        val = b
    } else if (typeof val == 'number')
        val = val === 0 && len === 0 ? new Uint8Array(0) : toBuffer(fixLength(val.toString(16)), len);
    else if (val && val.redIMul)
        val = val.toArrayLike(Uint8Array)
    if (!val)
        val = new Uint8Array(0)
    // since rlp encodes an empty array for a 0 -value we create one if the required len===0
    if (len == 0 && val.byteLength == 1 && val[0] === 0)
        return new Uint8Array(0)
    // if we have a defined length, we should padLeft 00 or cut the left content to ensure length
    if (len > 0 && val.byteLength && val.byteLength !== len) {
        if (val.byteLength > len) return val.slice(val.byteLength - len)
        let b = new Uint8Array(len)
        for (let i = 0; i < val.byteLength; i++)
            b[len - val.byteLength + i] = val[i]
        return b
    }
    return val;
}
/**
 * removes all leading 0 in a hex-string
 */
function toSimpleHex(val) {
    let hex = val.replace('0x', '');
    while (hex.startsWith('00') && hex.length > 2)
        hex = hex.substr(2);
    return '0x' + hex;
}
/**
 * decodes to base64
 */
function base64Decode(val) {
    // calculate the length
    if ((typeof val) !== 'string') throw new Error('Must be a string as input')
    let lip = val.length
    let len = lip / 4 * 3
    if (lip > 1 && val[lip - 2] == '=' && val[lip - 1] == '=')
        len -= 2
    else if (val[lip - 1] == '=')
        len -= 1

    return call_buffer('base64Decode', len, val)
}
/**
 * encodes to base64
 */
function base64Encode(val) {
    return call_string('base64Encode', val, val.length)
}
/**
 * returns a address from a private key
 */
function getAddress(pk) {
    return private2address(pk)
}
/** removes all leading 0 in the hexstring */
function toMinHex(key) {
    if (typeof key !== 'string')
        key = toHex(key)
    if (typeof key === 'number')
        key = toHex(key);
    if (typeof key === 'string') {
        key = key.trim();
        if (key.length < 3 || key[0] != '0' || key[1] != 'x')
            throw new Error("Only Hex format is supported. Given value " + key + " is not valid Hex ");
        for (let i = 2; i < key.length; i++) {
            if (key[i] !== '0')
                return '0x' + key.substr(i);
        }
    }
    return '0x0';
}

function splitSignature(sig, data, hashFirst = 1) {
    sig = toHex(sig)
    const v = parseInt('0x' + sig.substr(130, 2))
    return {
        r: sig.substr(0, 66),
        s: '0x' + sig.substr(66, 64),
        v: v < 27 ? (v % 2) + 27 : v,
        recoveryParam: v < 27 ? v : v - 27,
        message: hashFirst ? data : null,
        messageHash: toHex(hashFirst ? keccak(data) : data),
        signature: toHex(sig)
    }
}

/** padStart for legacy */
function padStart(val, minLength, fill = ' ') {
    while (val.length < minLength)
        val = fill + val;
    return val;
}
/** padEnd for legacy */
function padEnd(val, minLength, fill = ' ') {
    while (val.length < minLength)
        val = val + fill;
    return val;
}

function soliditySha3(...args) {
    return toHex(keccak('0x' + toHex(abiEncode('_(' + args.map(_ => {
        switch (typeof (_)) {
            case 'number':
            case 'bigint':
                return _ < 0 ? 'int256' : 'uint256'
            case 'string':
                return _.substr(0, 2) === '0x' ? 'bytes' : 'string'
            case 'boolean':
                return 'bool'
            default:
                return 'bytes'
        }
    }).join() + ')', args)).substr(10)))
}

function createSignatureHash(def) {
    return keccak(def.name + createSignature(def.inputs))
}

const util = {
    checkForError,
    promisify,
    toHex,
    toNumber,
    toUtf8,
    toBigInt,
    toBuffer,
    toSimpleHex,
    toMinHex,
    padStart,
    padEnd,
    keccak,
    toChecksumAddress,
    abiEncode,
    abiDecode,
    ecSign,
    splitSignature,
    private2address,
    soliditySha3,
    createSignatureHash,
    toUint8Array,
    base64Decode,
    base64Encode,
    getVersion
}

// add as static proporty and as standard property.
IN3.util = util
IN3.prototype.util = util


class SimpleSigner {
    constructor(...pks) {
        this.accounts = {}
        if (pks) pks.forEach(_ => this.addAccount(_))
    }

    addAccount(pk) {
        const adr = private2address(pk)
        this.accounts[adr] = toBuffer(pk)
        return adr
    }


    async canSign(address) {
        return !!this.accounts[toChecksumAddress(address)]
    }

    async sign(data, account, type, ethV = true) {
        const pk = this.accounts[toChecksumAddress(account)]
        if (!pk || pk.length != 32) throw new Error('Account not found for signing ' + account)
        return ecSign(pk, data, type, ethV)

    }

}

IN3.SimpleSigner = SimpleSigner

in3w.extensions.push(c => c.eth = new EthAPI(c))

class EthAPI {

    constructor(client) { this.client = client }

    send(name, ...params) {
        return this.client.sendRPC(name, params || [])
    }

    /**
     * Returns the current price per g wei. ()
     */
    async resolveENS(name) {
        if (name && name.endsWith('.eth'))
            return this.send('in3_ens', ...arguments)
        return name
    }

    /**
     * Returns the number of most recent block. ()
     */
    blockNumber() {
        return this.send('eth_blockNumber').then(parseInt)
    }
    /**
     * Returns the current price per g wei. ()
     */
    gasPrice() {
        return this.send('eth_gasPrice').then(parseInt)
    }

    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     */
    call(tx, block = 'latest') {
        return this.send('eth_call', tx, toHexBlock(block))
    }

    /**
     * Executes a function of a contract, by passing a [method-signature](https://github.com/ethereumjs/ethereumjs-abi/blob/master/README.md#simple-encoding-and-decoding) and the arguments, which will then be ABI-encoded and send _call. 
     */
    async callFn(to, method, ...args) {
        if (typeof (to) === 'string' && to.endsWith('.eth')) to = await this.resolveENS(to)

        if (!method) throw new Error('Missing method-signature')
        const sigPattern = method.match(/(\(.*?\))/g)
        let block = 'latest'
        if (sigPattern && sigPattern.length) {
            const inParams = splitTypes(sigPattern[0])
            if (args.length > inParams.length) {
                block = args[inParams.length]
                args = args.slice(0, inParams.length)
            }
        }
        else throw new Error('Invalid method-signature!')
        return IN3.onInit(() => this.send('eth_call', { to: toHex(to, 20), data: abiEncode(method, ...args) }, block)
            .then(r => {
                const res = abiDecode(method, r)
                return res.length == 1 ? res[0] : res
            }))
    }

    /**
     * Returns the EIP155 chain ID used for transaction signing at the current best block. Null is returned if not available.
     */
    chainId() {
        return this.send('eth_chainId')
    }

    /**
     * Makes a call or transaction, which won’t be added to the blockchain and returns the used gas, which can be used for estimating the used gas.
     */
    estimateGas(tx/*, block = 'latest'*/) {
        return this.send('eth_estimateGas', tx/*, toHexBlock(block)*/).then(parseInt)
    }

    /**
     * Returns the balance of the account of given address in wei ().
     */
    getBalance(address, block = 'latest') {
        return this.send('eth_getBalance', address, toHexBlock(block)).then(toBigInt)
    }

    /**
     * Returns code at a given address.
     */
    getCode(address, block = 'latest') {
        return this.send('eth_getCode', address, block)
    }


    /**
     * Returns the value from a storage position at a given address.
     */
    getStorageAt(address, pos, block = 'latest') {
        return this.send('eth_getStorageAt', address, pos, toHexBlock(block))
    }


    /**
     * Returns information about a block by hash.
     */
    getBlockByHash(hash, includeTransactions = false) {
        return this.send('eth_getBlockByHash', hash, includeTransactions)
    }

    /**
     * Returns information about a block by block number.
     */
    getBlockByNumber(block = 'latest', includeTransactions = false) {
        return this.send('eth_getBlockByNumber', toHexBlock(block), includeTransactions)
    }


    /**
     * Returns the number of transactions in a block from a block matching the given block hash.
     */
    getBlockTransactionCountByHash(block) {
        return this.send('eth_getBlockTransactionCountByHash', block).then(parseInt)
    }


    /**
     * Returns the number of transactions in a block from a block matching the given block number.
     */
    getBlockTransactionCountByNumber(block) {
        return this.send('eth_getBlockTransactionCountByNumber', toMinHex(block)).then(parseInt)
    }

    /**
     * Polling method for a filter, which returns an array of logs which occurred since last poll.
     */
    getFilterChanges(id) {
        return this.send('eth_getFilterChanges', id)
    }

    /**
     * Returns an array of all logs matching filter with given id.
     */
    getFilterLogs(id) {
        return this.send('eth_getFilterLogs', id)
    }

    /**
     * Returns an array of all logs matching a given filter object.
     */
    getLogs(filter) {
        if (filter.fromBlock) filter.fromBlock = toHexBlock(filter.fromBlock)
        if (filter.toBlock) filter.toBlock = toHexBlock(filter.toBlock)
        if (filter.limit) filter.limit = toNumber(filter.limit)
        return this.send('eth_getLogs', filter)
    }




    /**
     * Returns information about a transaction by block hash and transaction index position.
     */
    getTransactionByBlockHashAndIndex(hash, pos) {
        return this.send('eth_getTransactionByBlockHashAndIndex', hash, toMinHex(pos))
    }


    /**
     * Returns information about a transaction by block number and transaction index position.
     */
    getTransactionByBlockNumberAndIndex(block, pos) {
        return this.send('eth_getTransactionByBlockNumberAndIndex', toHexBlock(block), toMinHex(pos))
    }

    /**
     * Returns the information about a transaction requested by transaction hash.
     */
    getTransactionByHash(hash) {
        return this.send('eth_getTransactionByHash', hash)
    }

    /**
     * Returns the number of transactions sent from an address. ()
     */
    getTransactionCount(address, block = 'latest') {
        return this.send('eth_getTransactionCount', address, block).then(parseInt)
    }

    /**
     * Returns the receipt of a transaction by transaction hash.
     * Note That the receipt is available even for pending transactions.
     */
    getTransactionReceipt(hash) {
        return this.send('eth_getTransactionReceipt', hash).then(_ => !_ ? null : ({
            ..._,
            contractAddress: _.contractAddress && toChecksumAddress(_.contractAddress),
            from: _.from && toChecksumAddress(_.from)
        }))
    }

    /**
     * Returns information about a uncle of a block by hash and uncle index position.
     * Note: An uncle doesn’t contain individual transactions.
     */
    getUncleByBlockHashAndIndex(hash, pos) {
        return this.send('eth_getUncleByBlockHashAndIndex', hash, pos)
    }


    /**
     * Returns information about a uncle of a block number and uncle index position.
     * Note: An uncle doesn’t contain individual transactions.
     */
    getUncleByBlockNumberAndIndex(block, pos) {
        return this.send('eth_getUncleByBlockNumberAndIndex', block, pos)
    }

    /**
     * Returns the number of uncles in a block from a block matching the given block hash.
     */
    getUncleCountByBlockHash(hash) {
        return this.send('eth_getUncleCountByBlockHash', hash).then(parseInt)
    }

    /**
     * Returns the number of uncles in a block from a block matching the given block hash.
     */
    getUncleCountByBlockNumber(block) {
        return this.send('eth_getUncleCountByBlockNumber', block).then(parseInt)
    }


    /**
     * Creates a filter in the node, to notify when a new block arrives. To check if the state h, call eth_getFilterChanges.
     */
    newBlockFilter() {
        return this.send('eth_newBlockFilter')
    }


    /**
     * Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state h, call eth_getFilterChanges.
     * 
     * A note on specifying topic filters:
     * Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters:
     * 
     * [] “anything”
     * [A] “A in first position (and anything after)”
     * [null, B] “anything in first position AND B in second position (and anything after)”
     * [A, B] “A in first position AND B in second position (and anything after)”
     * [[A, B], [A, B]] “(A OR B) in first position AND (A OR B) in second position (and anything after)”
     */
    newFilter(filter) {
        return this.send('eth_newFilter', filter)
    }

    /**
     * Creates a filter in the node, to notify when new pending transactions arrive.
     * 
     * To check if the state h, call eth_getFilterChanges.
     */
    newPendingTransactionFilter() {
        return this.send('eth_newPendingTransactionFilter')
    }


    /**
     * Uninstalls a filter with given id. Should always be called when watch is no longer needed. Additonally Filters timeout when they aren’t requested with eth_getFilterChanges for a period of time.
     */
    uninstallFilter(id) {
        return this.send('eth_uninstallFilter', id)
    }

    /**
     * Returns the current ethereum protocol version.
     */
    protocolVersion() {
        return this.send('eth_protocolVersion')
    }

    /**
      * Returns the current ethereum protocol version.
      */
    syncing() {
        return this.send('eth_syncing')
    }


    /**
     * Creates new message call transaction or a contract creation for signed transactions.
     */
    sendRawTransaction(data) {
        return this.send('eth_sendRawTransaction', toHex(data))
    }

    /**
     * signs any kind of message using the `\x19Ethereum Signed Message:\n`-prefix
     * @param account the address to sign the message with (if this is a 32-bytes hex-string it will be used  key)
     * @param data the data to sign (Buffer, hexstring or utf8-string)
     */
    async sign(account, data) {
        // prepare data
        const d = toHex(data),
            message = '0x19' + toHex('Ethereum Signed Message:\n' + (d.length / 2 - 1)).substr(2) + d.substr(2),
            s = {
                message,
                messageHash: keccak(message)
            }

        if (account && account.length == 66) // use direct pk
            s.signature = toHex(ecSign(account, s.messageHash, false))
        else if (this.client.signer && await this.client.signer.canSign(account)) // use signer
            s.signature = toHex(await this.client.signer.sign(s.messageHash, account, false, true))
        else throw new Error('no signer found to sign for this account')
        return { ...splitSignature(s.signature, message, false), ...s, messageHash: toHex(s.messageHash) }
    }

    /** sends a Transaction */
    async sendTransaction(args) {
        if (!args.pk && (!this.client.signer || !(await this.client.signer.canSign(args.from)))) throw new Error('missing signer!')

        // prepare
        const tx = await prepareTransaction(args, this)
        if (args.pk) {
            if (!this.client.signer) this.client.signer = new SimpleSigner(args.pk)
            else if (this.client.signer.__proto__ === SimpleSigner.prototype) this.client.signer.addAccount(args.pk)
            else throw new Error('direct usage of private keys are not possible with a custom signer')
        }
        const txHash = await this.send('eth_sendTransaction', tx)


        if (args.confirmations === undefined) args.confirmations = 1

        // send it
        return args.confirmations ? confirm(txHash, this, parseInt(tx.gas || 21000), args.confirmations, args.timeout || 60) : txHash
    }

    web3ContractAt(abi, address, options = {}) {
        const api = this
        const ob = {
            _in3: this.client,
            _eventHashes: {},
            options: {
                ...options,
                address,
                jsonInterface: abi,
                handleRevert: false,
                transactionBlockTimeout: 50,
                transactionConfirmationBlocks: 6,
                transactionPollingTimeout: 750,
            },
            methods: {},
            events: {}
        }

        const createTopics = (name, options) => options.topics || [ob._eventHashes[name], ...(!options.filter ? [] : ob._eventHashes[ob._eventHashes[name]].inputs.filter(_ => _.indexed).map(d => options.filter[d.name] ? toHex(options.filter[d.name], 32) : null))]

        for (const def of abi) {
            switch (def.type) {
                case 'function':
                    const signature = def.name + createSignature(def.inputs)
                    const sigReturn = signature + ':' + createSignature(def.outputs)
                    ob.methods[def.name] = (...args) => ({
                        call: (options, block) => api.callFn(address, sigReturn, ...args, block || 'latest')
                            .then(r => {
                                if (def.outputs.length > 1) {
                                    let o = {}
                                    def.outputs.forEach((d, i) => o[i] = o[d.name] = r[i])
                                    return o;
                                }
                                return r
                            }),
                        send: options => {
                            let tx = { ...options }
                            if (args.length != def.inputs.length) throw new Error('Invalid number of arguments for ' + signature)
                            tx.method = signature
                            tx.args = args
                            tx.confirmations = ob.transactionConfirmationBlocks || 1
                            tx.to = address
                            return api.sendTransaction(tx)
                        },
                        encodeABI: () => toHex(abiEncode(signature, ...args)),
                        estimateGas: (options, block) => IN3.onInit(() => this.send('eth_estimateGas', { to: toHex(address, 20), data: toHex(abiEncode(signature, ...args)), ...options }).then(toNumber))
                    })
                    break
                case 'event':
                    const evSig = def.name + createSignature(def.inputs)
                    const eHash = toHex(keccak(toHex(evSig)))
                    ob._eventHashes[def.name] = eHash
                    ob._eventHashes[eHash] = def
                    ob.events[def.name] = options => new LogEmitter(
                        api,
                        {
                            address,
                            fromBlock: options.fromBlock || 'latest',
                            topics: createTopics(def.name, options),
                            limit: options.limit || 50
                        },
                        ob.options.transactionPollingTimeout,
                        l => ({ ...l, event: def.name, returnValues: decodeEventData(l, ob), signature: evSig })
                    )
            }

        }
        ob.once = (ev, options, handler) => {
            const e = ob.events[ev]
            if (!e) throw new Error('Event ' + ev + ' does not exist!')
            if (!handler) {
                handler = options
                options = {}
            }
            e.on('error', handler).once('data', d => h(null, d))
        }

        ob.events.allEvents = options => new LogEmitter(
            api,
            {
                address,
                fromBlock: options.fromBlock || 'latest',
                limit: options.limit || 50
            },
            ob.options.transactionPollingTimeout,
            l => ({ ...l, event: def.name, returnValues: decodeEventData(l, ob), signature: evSig })
        )
        ob.getPastEvents = (ev, options) => {
            return api.getLogs({
                address,
                fromBlock: options.fromBlock || 'latest',
                toBlock: options.toBlock || 'latest',
                limit: options.limit || 50,
                topics: ev === 'allEvents' ? [] : createTopics(ev, options)
            }).then(logs => logs.map(l => {
                const e = decodeEventData(l, ob)
                const def = abi.find(_ => _.name === e.event)
                if (!def) throw new Error('unknown event found!')
                delete e.event
                return { ...l, event: def.name, returnValues: e, signature: def.name + createSignature(def.inputs) }
            }))


        }



        return ob

    }


    contractAt(abi, address) {
        const api = this, ob = { _address: address, _eventHashes: {}, events: {}, _abi: abi, _in3: this.client }
        for (const def of abi.filter(_ => _.type == 'function')) {
            const method = def.name + createSignature(def.inputs)
            if (def.constant || def.stateMutability == 'view' || def.stateMutability == 'pure') {
                const signature = method + ':' + createSignature(def.outputs)
                ob[def.name] = function (...args) {
                    return api.callFn(address, signature, ...args)
                        .then(r => {
                            if (def.outputs.length > 1) {
                                let o = {}
                                def.outputs.forEach((d, i) => o[i] = o[d.name] = r[i])
                                return o;
                            }
                            return r
                        })
                }
            }
            else {
                ob[def.name] = function (...args) {
                    let tx = {}
                    if (args.length > def.inputs.length) tx = args.pop()
                    tx.method = method
                    tx.args = args.slice(0, def.name.length);
                    tx.confirmations = tx.confirmations || 1
                    tx.to = address
                    return api.sendTransaction(tx)
                }
            }
            ob[def.name].encode = (...args) => createCallParams(method, args.slice(0, def.name.length)).txdata
        }

        for (const def of abi.filter(_ => _.type == 'event')) {
            const eHash = toHex(keccak(toHex(def.name + createSignature(def.inputs))))
            ob._eventHashes[def.name] = eHash
            ob._eventHashes[eHash] = def
            ob.events[def.name] = {
                getLogs(options = {}) {
                    return api.getLogs({
                        address,
                        fromBlock: options.fromBlock || 'latest',
                        toBlock: options.toBlock || 'latest',
                        topics: options.topics || [eHash, ...(!options.filter ? [] : def.inputs.filter(_ => _.indexed).map(d => options.filter[d.name] ? toHex(options.filter[d.name], 32) : null))],
                        limit: options.limit || 50
                    }).then((logs) => logs.map(_ => {
                        const event = ob.events.decode(_)
                        return { ...event, log: _, event }
                    }))
                }
            }
        }
        ob.events.decode = function (log) { return decodeEventData(log, ob) }
        ob.events.all = {
            getLogs(options = {}) {
                return api.getLogs({
                    address,
                    fromBlock: options.fromBlock || 'latest',
                    toBlock: options.toBlock || 'latest',
                    topics: options.topics || [],
                    limit: options.limit || 50
                }).then((logs) => logs.map(_ => {
                    const event = ob.events.decode(_)
                    return { ...event, log: _, event }
                }))
            }
        }

        return ob
    }

    decodeEventData(log, d) {
        return decodeEvent(log, d)
    }
    hashMessage(data) {
        const d = toHex(data)
        return keccak('0x19' + toHex('Ethereum Signed Message:\n' + (d.length / 2 - 1)) + d.substr(2))
    }
}

async function confirm(txHash, api, gasPaid, confirmations, timeout = 10) {
    let steps = 200
    const start = Date.now()
    while (Date.now() - start < timeout * 1000) {
        const receipt = await api.getTransactionReceipt(txHash)
        if (receipt) {
            if (!receipt.status && gasPaid && gasPaid === parseInt(receipt.gasUsed))
                throw new Error('Transaction failed and all g used up gasPaid=' + gasPaid)
            if (receipt.status && receipt.status == '0x0')
                throw new Error('The Transaction failed because it returned status=0')

            if (confirmations > 1) {
                const start = parseInt(receipt.blockNumber)
                while (start + confirmations - 1 > await api.blockNumber())
                    await new Promise(_ => setTimeout(_, 2000))

                return api.getTransactionReceipt(txHash)
            }
            return receipt
        }

        // wait a second and try again
        await new Promise(_ => setTimeout(_, Math.min(timeout * 400, steps *= 2)))
    }

    throw new Error('Error waiting for the transaction to confirm')
}

async function prepareTransaction(args, api) {
    if (typeof (args.to) === 'string' && args.to.endsWith('.eth')) args.to = await api.resolveENS(args.to)
    const sender = args.from || (args.pk && private2address(args.pk))

    const tx = {
        value: util.toMinHex(args.value || 0)
    }
    if (args.to) tx.to = toHex(args.to)
    if (args.method) {
        tx.data = abiEncode(args.method, ...args.args)
        if (args.data) tx.data = args.data + tx.data.substr(10) // this is the case  for deploying contracts
    }
    else if (args.data)
        tx.data = toHex(args.data)
    if (args.nonce) tx.nonce = toMinHex(args.nonce)
    if (args.gasPrice) tx.gasPrice = toMinHex(args.gasPrice)

    if (sender) tx.from = sender
    try {
        tx.gas = util.toMinHex(args.gas || (api && (toNumber(await api.estimateGas(tx)) + 1000) || 3000000))
    }
    catch (ex) {
        throw new Error('The Transaction ' + JSON.stringify(args, null, 2) + ' will not be succesfully executed, since estimating g with: ' + ex)
    }
    return tx
}

function createSignature(fields) {
    return '(' + fields.map(f => {
        let baseType = f.type
        const t = baseType.indexOf('[')
        if (t > 0) baseType = baseType.substr(0, t)
        if (baseType === 'uint' || baseType === 'int') baseType += '256'
        return baseType + (t < 0 ? '' : f.type.substr(t))
    }).join(',') + ')'
}
function parseABIString(def) {
    const [name, args] = def.split(/[\(\)]/)
    return {
        name, type: 'event', inputs: args.split(',').filter(_ => _).map(_ => _.split(' ').filter(z => z)).map(_ => ({
            type: _[0],
            name: _[_.length - 1],
            indexed: _[1] == 'indexed'
        }))
    }
}

function decodeEventData(log, def) {
    let d = (typeof def === 'object') ? def._eventHashes[log.topics[0]] : parseABIString(def)
    if (!d) return null//throw new Error('Could not find the ABI')
    return decodeEvent(log, d)
}

function decodeEvent(log, d) {
    const indexed = d.inputs.filter(_ => _.indexed), unindexed = d.inputs.filter(_ => !_.indexed), r = { event: d && d.name }

    if (indexed.length) {
        let logBufs = appendBuffers(log.topics.slice(1).map(_ => toBuffer(_)))
        abiDecode(`prefix():${createSignature(indexed)}`, logBufs).forEach((v, i) => r[indexed[i].name] = v)
    }
    if (unindexed.length)
        abiDecode(`prefix():${createSignature(unindexed)}`, toBuffer(log.data)).forEach((v, i) => r[unindexed[i].name] = v)
    return r
}

/** Concatenating the Typed Buffer arrays together */
function appendBuffers(buffers) {
    const totalLength = buffers.reduce((acc, value) => acc + value.length, 0);
    if (!buffers.length) return null;
    let result = new Uint8Array(totalLength);

    // for each array - copy it over result; next array is copied right after the previous one
    let length = 0;
    for (let array of buffers) {
        result.set(array, length);
        length += array.length;
    }
    return result;
}

function toHexBlock(b) {
    return typeof b === 'string' ? b : util.toMinHex(b)
}

function fixBytesValues(input, type) {

    if (type.includes("bytes")) {
        if (!type.includes("[")) {
            return "0x" + util.toBuffer(input, toNumber(type.substr(5))).toString('hex')
        }
        else {
            return (input).map(i => { return ("0x" + util.toBuffer(i, toNumber(type.substr(5))).toString('hex')) })
        }
    }
    else return input
}

function encodeEtheresBN(val) {
    return val && BN.isBN(val) ? toHex(val) : val
}

class EventEmitter {
    on(ev, handler) {
        const list = this[ev] || (this[ev] = [])
        list.push(handler)
        return this
    }
    off(ev, handler) {
        const list = this[ev] || (this[ev] = [])
        const p = list.indexOf(handler)
        if (p >= 0) list.splice(p, 1)
    }
    once(ev, handler) {
        const list = this[ev] || (this[ev] = [])
        const f = val => {
            handler(val)
            this.off(ev, f)
        }
        list.push(f)
        return this
    }

    emit(ev, data) {
        (this[ev] || []).forEach(h => h(data))
    }
}

class LogEmitter {
    constructor(api, filter, polltime, decoder) {
        this.filterId = null
        this.timer = null
        this.listeners = new EventEmitter()
        api.newFilter(filter)
            .then(id => {
                const h = () => {
                    if (!(this.listeners.data || []).length && this.timer) {
                        // no more listeners
                        clearInterval(this.timer)
                        this.timer = null
                        api.uninstallFilter(id).then(() => { }, err => this.listeners.emit('error', err))
                        return
                    }
                    api.getFilterChanges(id)
                        .then(data => {
                            if (data && data.length)
                                data.forEach(d => this.listeners.emit('data', decoder(d)))
                        }, err => this.listeners.emit('error', err)
                        )
                }
                this.filterId = id
                this.timer = setInterval(() => { }, polltime)
            }, err => this.listeners.emit('error', err))
    }
    on(ev, handler) {
        this.listeners.on(ev, handler)
        return this
    }
    off(ev, handler) {
        this.listeners.off(ev, handler)
        return this
    }
    once(ev, handler) {
        this.listeners.once(ev, handler)
        return this
    }

}in3w.extensions.push(c => c.ipfs = new IpfsAPI(c))

class IpfsAPI {
  constructor(client) {
    this.client = client
    this.encoding = 'base64'
  }

  /**
   * retrieves the content for a hash from IPFS.
   * @param multihash  the IPFS-hash to fetch
   *
   */
  get(multihash) {
    return this.client.sendRPC('ipfs_get', [multihash, this.encoding])
      .then(response => response || Promise.reject(new Error(response.error || 'Hash not found')))
      .then(result => this.client.util.base64Decode(result))
      .then(result => this.client.util.toBuffer(result))
  }

  /**
   * stores the data on ipfs and returns the IPFS-Hash.
   * @param content puts a IPFS content
   */
  put(data) {
    let encoded = this.client.util.base64Encode(this.client.util.toBuffer(data))
    return this.client.sendRPC('ipfs_put', [encoded, this.encoding])
      .then(response => response || Promise.reject(new Error(response.error || 'Hash not found')))
  }
}in3w.extensions.push(c => c.btc = new BtcAPI(c))

class BtcAPI {
  constructor(client) {
    this.client = client
  }

  getTransaction(txid) {
    return this.client.sendRPC('getrawtransaction', [txid, true])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
  }

  getTransactionBytes(txid) {
    return this.client.sendRPC('getrawtransaction', [txid, false])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
      .then(result => this.client.util.toBuffer('0x' + result))
  }

  getBlockHeader(blockhash) {
    return this.client.sendRPC('getblockheader', [blockhash, true])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
  }

  getBlockHeaderBytes(bllockhash) {
    return this.client.sendRPC('getblockheader', [bllockhash, false])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
      .then(result => this.client.util.toBuffer('0x' + result))
  }

  getBlockWithTxData(blockhash) {
    return this.client.sendRPC('getblock', [blockhash, 2])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
  }

  getBlockWithTxIds(blockhash) {
    return this.client.sendRPC('getblock', [blockhash, 1])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
  }

  getBlockBytes(bllockhash) {
    return this.client.sendRPC('getblock', [bllockhash, false])
      .then(response => response || Promise.reject(new Error(response.error || 'txid not found')))
      .then(result => this.client.util.toBuffer('0x' + result))
  }




} return IN3; })();
